// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package pgc

import (
	"context"
)

const createBanner = `-- name: CreateBanner :exec
INSERT INTO
    banners (name)
VALUES
    ($1)
`

func (q *Queries) CreateBanner(ctx context.Context, name string) error {
	_, err := q.db.Exec(ctx, createBanner, name)
	return err
}

const getCounterStatistics = `-- name: GetCounterStatistics :many
SELECT
    banner_id, timestamp_from, timestamp_to, count
FROM
    counter_statistics
WHERE
    banner_id = $1
  AND timestamp_from >= $2
  AND timestamp_to <= $3
`

type GetCounterStatisticsParams struct {
	BannerID      int32 `json:"bannerId"`
	TimestampFrom int64 `json:"timestampFrom"`
	TimestampTo   int64 `json:"timestampTo"`
}

func (q *Queries) GetCounterStatistics(ctx context.Context, arg GetCounterStatisticsParams) ([]CounterStatistic, error) {
	rows, err := q.db.Query(ctx, getCounterStatistics, arg.BannerID, arg.TimestampFrom, arg.TimestampTo)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []CounterStatistic
	for rows.Next() {
		var i CounterStatistic
		if err := rows.Scan(
			&i.BannerID,
			&i.TimestampFrom,
			&i.TimestampTo,
			&i.Count,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
