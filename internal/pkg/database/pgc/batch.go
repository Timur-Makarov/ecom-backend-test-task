// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: batch.go

package pgc

import (
	"context"
	"errors"

	"github.com/jackc/pgx/v5"
)

var (
	ErrBatchAlreadyClosed = errors.New("batch already closed")
)

const createOrUpdateCounterStatistics = `-- name: CreateOrUpdateCounterStatistics :batchexec
INSERT INTO
    counter_statistics (banner_id, timestamp_from, timestamp_to, COUNT)
VALUES
    ($1, $2, $3, $4)
ON CONFLICT (timestamp_from, timestamp_to) DO
UPDATE
    SET
    COUNT = counter_statistics.count + EXCLUDED.count
`

type CreateOrUpdateCounterStatisticsBatchResults struct {
	br     pgx.BatchResults
	tot    int
	closed bool
}

type CreateOrUpdateCounterStatisticsParams struct {
	BannerID      int32 `json:"bannerId"`
	TimestampFrom int64 `json:"timestampFrom"`
	TimestampTo   int64 `json:"timestampTo"`
	Count         int64 `json:"count"`
}

func (q *Queries) CreateOrUpdateCounterStatistics(ctx context.Context, arg []CreateOrUpdateCounterStatisticsParams) *CreateOrUpdateCounterStatisticsBatchResults {
	batch := &pgx.Batch{}
	for _, a := range arg {
		vals := []interface{}{
			a.BannerID,
			a.TimestampFrom,
			a.TimestampTo,
			a.Count,
		}
		batch.Queue(createOrUpdateCounterStatistics, vals...)
	}
	br := q.db.SendBatch(ctx, batch)
	return &CreateOrUpdateCounterStatisticsBatchResults{br, len(arg), false}
}

func (b *CreateOrUpdateCounterStatisticsBatchResults) Exec(f func(int, error)) {
	defer b.br.Close()
	for t := 0; t < b.tot; t++ {
		if b.closed {
			if f != nil {
				f(t, ErrBatchAlreadyClosed)
			}
			continue
		}
		_, err := b.br.Exec()
		if f != nil {
			f(t, err)
		}
	}
}

func (b *CreateOrUpdateCounterStatisticsBatchResults) Close() error {
	b.closed = true
	return b.br.Close()
}
